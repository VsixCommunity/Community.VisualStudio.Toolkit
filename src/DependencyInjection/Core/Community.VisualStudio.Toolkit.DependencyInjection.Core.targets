<?xml version="1.0" encoding="utf-8"?>
<Project>

  <Target Name="ExtensibilityEssentialsCheck" BeforeTargets="PrepareForBuild">
    <ItemGroup>
      <!-- 
      We only want to check if the Extensibility Essentials extension is installed for VSIX projects,
      because that is the only type of projects that the extension will add the build property for.
      This requires two steps because we cannot filter an item group as it's created from a property.
      First, turn the `ProjectTypeGuids` property into a set of items, then create another set by 
      filtering out any types that are not the VSIX project type. 
      -->
      <ExtensibilityEssentialsProjectTypes Include="$(ProjectTypeGuids)"/>
      <ExtensibilityEssentialsVsixProjectTypes Include="@(ExtensibilityEssentialsProjectTypes)" Condition="'%(Identity)' == '{82b43b9b-a64c-4715-b499-d71e9ca2bd60}'"/>
    </ItemGroup>

    <PropertyGroup>
      <!-- 
      Determine whether a `HelpLink` property is supported on Warning and Error tasks. 
      The ability to supply a `HelpLink` property was added in MSBuild v16.8.
      -->
      <MSBuildMajorVersion>$([System.Version]::Parse($(MSBuildVersion)).Major)</MSBuildMajorVersion>
      <MSBuildMinorVersion>$([System.Version]::Parse($(MSBuildVersion)).Minor)</MSBuildMinorVersion>
      <WarningsAndErrorsHaveHelpLink Condition="($(MSBuildMajorVersion) > 16) or ($(MSBuildMajorVersion) == 16 and $(MSBuildMinorVersion) >= 8)">true</WarningsAndErrorsHaveHelpLink>
    </PropertyGroup>
      
    <PropertyGroup>
      <!-- Message text. -->
      <ExtensibilityEssentialsInfoText Condition="'$(ExtensibilityEssentialsInfoText)' == ''">The 'Extensibility Essentials' extension makes extension development easier.</ExtensibilityEssentialsInfoText>
      <ExtensibilityEssentialsWarningText Condition="'$(ExtensibilityEssentialsWarningText)' == ''">The 'Extensibility Essentials' extension is recommended for this project.</ExtensibilityEssentialsWarningText>
      <ExtensibilityEssentialsErrorText Condition="'$(ExtensibilityEssentialsErrorText)' == ''">The 'Extensibility Essentials' extension is required for this project.</ExtensibilityEssentialsErrorText>

      <!-- Message metadata. -->
      <ExtensibilityEssentialsCode>VSTK001</ExtensibilityEssentialsCode>
      <ExtensibilityEssentialsHelpLink Condition="'$(VisualStudioVersion)' == '15.0'">https://marketplace.visualstudio.com/items?itemName=MadsKristensen.ExtensibilityEssentials</ExtensibilityEssentialsHelpLink>
      <ExtensibilityEssentialsHelpLink Condition="'$(VisualStudioVersion)' == '16.0'">https://marketplace.visualstudio.com/items?itemName=MadsKristensen.ExtensibilityEssentials2019</ExtensibilityEssentialsHelpLink>
    
      <!-- Default level. -->
      <ExtensibilityEssentialsLevel Condition="'$(ExtensibilityEssentialsLevel)' == ''">Info</ExtensibilityEssentialsLevel>

      <!--
      Visibility Calculation. Only show the message, warning or error for VSIX projects, and only
      when building them inside Visual Studio so that we don't break command line builds (because
      the extension won't be able to provide the `ExtensibilityEssentialsInstalled` property).
      Also omit the message for CI builds, just in case Visual Studio is being used for CI. 
      -->
      <IsVsixProject Condition="'@(ExtensibilityEssentialsVsixProjectTypes->Count())' &gt; 0">true</IsVsixProject>
      <IsExtensibilityEssentialsMissing Condition="'$(IsVsixProject)' == 'true' and '$(CI)' == '' and '$(BuildingInsideVisualStudio)' == 'true' and '$(ExtensibilityEssentialsInstalled)' != 'true'">true</IsExtensibilityEssentialsMissing>
    </PropertyGroup>

    <!-- 
    Verify that a valid "level" has been specified. This protects against the 
    user making a mistake and not realizing that the message will never be shown.
    -->
    <Warning
      Condition="'$(ExtensibilityEssentialsLevel)' != 'None' and '$(ExtensibilityEssentialsLevel)' != 'Info' and '$(ExtensibilityEssentialsLevel)' != 'Warning' and '$(ExtensibilityEssentialsLevel)' != 'Error'"
      Text="The 'ExtensibilityEssentialsLevel' property value '$(ExtensibilityEssentialsLevel)' is invalid. Valid values are 'None', 'Info', 'Warning' or 'Error'."
      />
    
    <!-- 
    Messages marked as `IsCritical` appear in Visual Studio's Error List under the 'Messages' tab. 
    Note that the Message task does not support the `HelpLink` property. :(
    -->
    <Message
      Condition="'$(IsExtensibilityEssentialsMissing)' == 'true' and '$(ExtensibilityEssentialsLevel)' == 'Info'"
      Text="$(ExtensibilityEssentialsInfoText)"
      Code="$(ExtensibilityEssentialsCode)"
      IsCritical="true"
      />
    
    <!-- For MSBuild versions that do not support `HelpLink`. -->
    <Warning 
      Condition="'$(WarningsAndErrorsHaveHelpLink)' != 'true' and '$(IsExtensibilityEssentialsMissing)' == 'true' and '$(ExtensibilityEssentialsLevel)' == 'Warning'" 
      Text="$(ExtensibilityEssentialsWarningText)" 
      Code="$(ExtensibilityEssentialsCode)"
      />

    <Error 
      Condition="'$(WarningsAndErrorsHaveHelpLink)' != 'true' and '$(IsExtensibilityEssentialsMissing)' == 'true' and '$(ExtensibilityEssentialsLevel)' == 'Error'" 
      Text="$(ExtensibilityEssentialsErrorText)" 
      Code="$(ExtensibilityEssentialsCode)"
      />
      
    <!-- For MSBuild versions that support `HelpLink`. -->
    <Warning 
      Condition="'$(WarningsAndErrorsHaveHelpLink)' == 'true' and '$(IsExtensibilityEssentialsMissing)' == 'true' and '$(ExtensibilityEssentialsLevel)' == 'Warning'" 
      Text="$(ExtensibilityEssentialsWarningText)" 
      Code="$(ExtensibilityEssentialsCode)"
      HelpLink="$(ExtensibilityEssentialsHelpLink)"
      />

    <Error 
      Condition="'$(WarningsAndErrorsHaveHelpLink)' == 'true' and '$(IsExtensibilityEssentialsMissing)' == 'true' and '$(ExtensibilityEssentialsLevel)' == 'Error'" 
      Text="$(ExtensibilityEssentialsErrorText)" 
      Code="$(ExtensibilityEssentialsCode)"
      HelpLink="$(ExtensibilityEssentialsHelpLink)"
      />
  </Target>

</Project>
